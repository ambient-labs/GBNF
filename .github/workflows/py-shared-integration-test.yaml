on:
  workflow_call:
    inputs:
      package:
        required: true
        description: "Path to package"
        type: string
      pyversion:
        required: true
        description: "Python version to use"
        type: string

env:
  FORCE_COLOR: "1"

jobs:
  integration-test:
    name: 'Integration Test ${{ matrix.pyversion }}'
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-suffix: "optional-suffix"

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.pyversion }}

      - run: 	uv venv --python ${{ inputs.pyversion }} && source .venv/bin/activate && uv pip install -r pyproject.toml
        working-directory: ${{ inputs.package }}

      - uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build integration tests
        if: inputs.package == './packages/gbnf/python'
        working-directory: ${{ inputs.package }}
        run: cd ../../ && pnpm --filter test-writer build && cd - && make write_integration_tests

      - run: make test_integration
        working-directory: ${{ inputs.package }}

      - name: Setup tmate session
        if: failure()
        uses: mxschmitt/action-tmate@v3
        with:
          detached: true
